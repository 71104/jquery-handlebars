{"name":"jquery-handlebars","tagline":"A jQuery plugin to render Handlebars.js templates into elements","body":"jquery-handlebars\r\n=================\r\n\r\nA [jQuery](http://jquery.com/) plugin to render [Handlebars.js](http://handlebarsjs.com/) templates into elements.\r\n\r\nTemplate scripts are retrieved through AJAX, precompiled and cached.\r\n\r\nDownload\r\n--------\r\n\r\n[Version 1.1](https://github.com/71104/jquery-handlebars/archive/1.1.4.zip) available.\r\n\r\nGetting Started\r\n---------------\r\n\r\nEach jQuery object has a `render` method that:\r\n- retrieves the specified template (either from cache or by fetching through AJAX and compiling with Handlebars),\r\n- renders it through Handlebars using the specified context object,\r\n- passes the output string to the jQuery object's `html` method.\r\n\r\nExample:\r\n\r\n```handlebars\r\n<p>{{ field1 }}, {{ field2 }}</p>\r\n```\r\n\r\n```javascript\r\n// will fetch <template.handlebars> and render to the DOM element whose id is \"content\"\r\n$('#content').render('template', {\r\n\tfield1: 'Hello',\r\n\tfield2: 'world!'\r\n});\r\n```\r\n\r\nThe first argument to the `render` method is a template name. The plugin builds the template path to fetch from this name by prepending a base path and appending a file name extension. The default base path is the empty string, while the default extension is `.handlebars`. To configure them differently use the `jQuery.handlebars` method:\r\n\r\n```javascript\r\n$.handlebars({\r\n\ttemplatePath: 'path/to/templates',\r\n\ttemplateExtension: 'hbs'\r\n});\r\n\r\n// now this will fetch <path/to/templates/content.hbs>\r\n$('#some-element').render('content', {\r\n\t// ...\r\n});\r\n```\r\n\r\nThe second argument to the `render` method is of course the context to use in Handlebars to render the template.\r\n\r\nHelpers and partials\r\n--------------------\r\n\r\nWhen using this plugin you can use the `Handlebars` namespace normally if you want; this allows you to register helpers and partials.\r\n\r\nFor example:\r\n\r\n```handlebars\r\n{{! I'm using a custom \"salute\" helper }}\r\n<p>{{salute what }}</p>\r\n\r\n{{! I'm using a custom \"csv\" block helper }}\r\n{{#csv array }}{{ this }}{{/csv}}\r\n```\r\n\r\n```javascript\r\nHandlebars.registerHelper('salute', function (what) {\r\n\treturn 'Hello, ' + what + '!';\r\n});\r\n\r\nHandlebars.registerHelper('csv', function (array, options) {\r\n\treturn array.map(function (element) {\r\n\t\treturn options.fn(element);\r\n\t}).join(', ');\r\n});\r\n\r\n$('#content').render('content', {\r\n\twhat: 'world',\r\n\tarray: [1, 2, 3]\r\n});\r\n```\r\n\r\nThe plugin also supports fetching and registering partials. You only need to configure the base path and filename extension for the partial files in the `jQuery.handlebars` method:\r\n\r\n```javascript\r\n$.handlebars({\r\n\tpartialPath: 'partials',\r\n\tpartialExtension: 'partial'\r\n});\r\n```\r\n\r\nThen you can register a partial using the `partial` action of the `jQuery.handlebars` method:\r\n\r\n```javascript\r\n/* based on configured settings, this will fetch the <partials/element.partial>\r\n\tfile and register it as a partial */\r\n$.handlebars('partial', 'element');\r\n```\r\n\r\nAt this point, assuming you have the following `partials/element.partial` file:\r\n\r\n```html\r\n<li>{{ this }}</li>\r\n```\r\n\r\nyou can access it in your templates normally:\r\n\r\n```handlebars\r\n<ul>\r\n{{#each array }}\r\n\t{{> element }}\r\n{{/each}}\r\n</ul>\r\n```\r\n\r\n```javascript\r\n$('#content').render('template', {\r\n\tarray: ['first', 'second', 'last']\r\n});\r\n```\r\n\r\nAs a shorthand you can register all the partials at initialization time using the `partials` configuration setting:\r\n\r\n```javascript\r\n$.handlebars({\r\n\ttemplatePath: 'templates',\r\n\tpartialPath: 'partials',\r\n\tpartials: ['header', 'footer', 'user', 'another-partial', 'another-one']\r\n});\r\n```\r\n\r\nLicense\r\n-------\r\n\r\nMIT. Copyright 2013 Alberto La Rocca.\r\n","google":"UA-36961344-3","note":"Don't delete this file! It's used internally to help with page regeneration."}